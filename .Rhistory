a <- 1:5
class(a)
class(a) <- "dfgdfgd"
class(a)
library(compositions)
library(robCompositions)
library(deltacomp)
library(dplyr)
data1 <- data("fairclough")
data1
nrow(data1)
# drop last three rows of missing values which somehow appeared at the end of the dataset.
# With this command, I am telling R to keep rows 1 to 166 of data1.
data1 <- data1[1:166,]
data("fairclough")
?data
# get data
# this is Stuart Fairclough's dataset that is publicly available through
# his IJBNPA paper, Fitness, Fatness and the Reallocation of Time.
# look for the supplementary file with the dataset in it
# https://ijbnpa.biomedcentral.com/articles/10.1186/s12966-017-0521-z
# data1 <- read.csv(file.choose())
# data1 <- read.csv("Fairclough.csv")
data("fairclough")
data1 <-fairclough
nrow(data1)
data1
tail(data1)
# drop last three rows of missing values which somehow appeared at the end of the dataset.
# With this command, I am telling R to keep rows 1 to 166 of data1.
data1 <- data1[1:166,]
fairclough
res_deltacop <-
data1 %>%
dplyr::select(
z_bmi,
sleep,
sed,
lpa,
mvpa,
decimal_age,
sex
)
data1 %>%
dplyr::select(
z_bmi,
sleep,
sed,
lpa,
mvpa,
decimal_age,
sex
) %>%
deltacomp::predict_delta_comps(
dataf = .,
y = "z_bmi",
comps = c("sleep", "sed", "lpa", "mvpa"),
covars = c("decimal_age", "sex"),
deltas = seq(0, 15, by = 15) / (24 * 60),
comparisons = "one-v-one",
alpha = 0.05,
verbose = FALSE
) %>%
# convert time reallocation (= colname "delta") to minuite
dplyr::mutate(delta = delta*1440) %>%
# leave only the results when you replace a behavior for 15 minutes.
filter(delta == 15) %>%
dplyr::mutate(delta_pred = round(delta_pred, 6))
?acomp
?mean.acomp
library(deltacomp)
predict_delta_comps(
dataf = fat_data,
y = "fat",
comps = c("sl", "sb", "lpa", "mvpa"),
covars = c("sibs", "parents", "ed"),
deltas = seq(-60, 60, by = 5) / (24 * 60),
comparisons = "prop-realloc",
alpha = 0.05,
verbose = FALSE
)
predict_delta_comps(
dataf = fat_data,
y = "fat",
comps = c("sl", "sb", "lpa", "mvpa"),
covars = c("sibs", "parents", "ed"),
deltas = seq(-60, 60, by = 5) / (24 * 60),
comparisons = "one-v-one",
alpha = 0.05,
verbose = FALSE
)
predict_delta_comps(
dataf = fat_data,
y = "fat",
comps = c("sl", "sb", "lpa", "mvpa"),
covars = c("sibs", "parents", "ed"),
deltas = seq(-60, 60, by = 5) / (24 * 60),
comparisons = "one-v-all",
alpha = 0.05,
verbose = FALSE
)
